apply plugin: "java"
apply plugin: "scala"
apply plugin: "idea"
//apply plugin: 'cobertura'
//apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/groups/public" }
    }
    dependencies {
     //   classpath 'org.scoverage:gradle-scoverage:0.6-SNAPSHOT'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

repositories {
    mavenLocal();
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

sourceCompatibility = '1.7'
version = getVersionName

// define a configuration for scala compiler plugins
// the transitive=false means that the plugin won't show up
// as a dependency in the final output
configurations {
    //noinspection GroovyAssignabilityCheck
    scalaCompilerPlugins { transitive = false }
}



tasks.withType(ScalaCompile) {
    // use zinc-based incremental compiler
    scalaCompileOptions.useAnt = false
}

tasks.withType(ScalaDoc) {
    scalaDocOptions.setAdditionalParameters(["-doc-external-doc"])
}

dependencies {
    compile "org.scala-lang:scala-library:2.11.4"
    compile "org.scala-lang:scala-parser-combinators:2.11.0-M4"
    testCompile 'org.scalatest:scalatest_2.11:2.2.0'
    //scoverage 'org.scoverage:scalac-scoverage-plugin_2.11:0.99.5'
}

test << {
    ant.taskdef(
            name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: classpath.asPath
    )
    ant.scalatest(
            runpath: testClassesDir,
            haltonfailure: 'true',
            fork: 'false') {
        reporter(type: 'stderr')
    }
}

task dccJar(type: Jar) {
    description "Create runnable dcc jarfile"
    manifest {
        attributes(
                'Implementation-Title': 'Decaf',
                'Implementation-Version': version,
                'Created-By': 'Hawk Weisman & Matthew Clive',
                'Main-Class': 'decaf.Compiler',
                'Class-Path': configurations.runtime
            )
    }
    archiveName = 'dcc.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}



task lexstdout(dependsOn: classes, type: JavaExec) {
    description "Print lexer output to stdout. Use `-Psrc=<source>` to set the source file, default is program2.decaf"
    main = 'decaf.test.StdoutTest'
    if (project.hasProperty('src')) {
        args src, ""
    }
    classpath = sourceSets.main.runtimeClasspath
}

task dcc(dependsOn: classes, type: JavaExec) {
    description "Run the Decaf compiler. Use `-Psrc=<source>` to set the source file."
    main = 'decaf.Compiler'
    if (project.hasProperty('src')) {
        args src, ""
    }
    classpath = sourceSets.main.runtimeClasspath
}